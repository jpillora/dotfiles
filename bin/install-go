#!/bin/bash
#force run with bash
if [ -z "$BASH_VERSION" ]; then
  exec bash "$0" "$@"
  return
fi
#run without sudo, then with, if needed
function psudo() {
  OUT=$(bash -c "$*" 2>&1)
  STATUS=$?
  if [ $STATUS -eq 0 ]; then
    return 0
  fi
  if [[ $OUT =~ "Permission denied" ]]; then
    echo "attempting 'sudo $@'"
    sudo bash -c "$*"
  else
    echo "command '$@' failed"
    echo $OUT
    exit 1
  fi
}
#install go
function install {
  # detect latest version
  echo "Finding latest version of Go..."
  declare VER=$(curl -s https://go.dev/dl/ | grep -m 1 -o 'go1\(\.[0-9]\+\)\+' | head -n1)
  echo "Latest version: $VER"
  # detect if already have latest
  if which go >/dev/null; then
    declare CUR=$(go version | grep -o 'go1\(\.[0-9]\+\)\+' | head -n1)
    echo "Installed version: $CUR"
    if [ "$CUR" = "$VER" ]; then
      return 0
    fi
  fi
  # detect os/arch
  declare OS=$(uname -s | tr 'A-Z' 'a-z')
  if uname -m | grep arm64 >/dev/null; then
    declare ARCH=arm64
  elif uname -m | grep arm >/dev/null; then
    declare ARCH=armv6l
  elif uname -m | grep 64 >/dev/null; then
    declare ARCH=amd64
  else
    declare ARCH=386
  fi
  # download
  declare FILE="$VER.$OS-$ARCH.tar.gz"
  declare TMP_DIR=$(mktemp -d -t goXXXX)
  if [ -z "$TMP_DIR" ]; then
    echo "mktemp failed"
    exit 1
  fi
  # echo "Downloading '$FILE' into $TMP_DIR"
  # curl -# -L "https:/go.dev/dl/$FILE" | tar -C $TMP_DIR -zxf -
  declare GO_DIR="$TMP_DIR/go"
  echo "Go has been downloaded. Deleting old version..."
  # wipe old version
  psudo rm -rf /usr/local/go
  echo "Installing new version..."
  psudo mv $GO_DIR /usr/local/go
  echo "Go has been installed. Add /usr/local/go/bin to your PATH."
}
install
